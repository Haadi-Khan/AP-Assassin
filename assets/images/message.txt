#!/bin/python3

import math
import os
import random
import re
import sys



#
# Complete the 'rotateCube' function below.
#
# The function is expected to return a STRING.
# The function accepts following parameters:
#  1. STRING start
#  2. STRING moves
#

board = []
#             0  1  2  3  4  5  6  7  8  9  10 11 
board.append("__ __ __ O0 O1 O2 __ __ __ __ __ __".split()) #0 
board.append("__ __ __ O3 O4 O5 __ __ __ __ __ __".split()) #1
board.append("__ __ __ O6 O7 O8 __ __ __ __ __ __".split()) #2
board.append("B0 B1 B2 R0 R1 R2 G0 G1 G2 Y0 Y1 Y2".split()) #3
board.append("B3 B4 B5 R3 R4 R5 G3 G4 G5 Y3 Y4 Y5".split()) #4
board.append("B6 B7 B8 R6 R7 R8 G6 G7 G8 Y6 Y7 Y8".split()) #5
board.append("__ __ __ P0 P1 P2 __ __ __ __ __ __".split()) #6
board.append("__ __ __ P3 P4 P5 __ __ __ __ __ __".split()) #7
board.append("__ __ __ P6 P7 P8 __ __ __ __ __ __".split()) #8

def getPosition(start):
    global board
    for i in range(len(board)):
        if start in board[i]:
            return i, board[i].index(start)

def moveRow(rowNum):
    global board
    # if rowNum == 4:
    b0 = board[rowNum - 1][0]
    for i in range(1, 12):
        board[rowNum - 1][i-1] = board[rowNum - 1][i]
    board[rowNum - 1][11] = b0

    # elif rowNum == 5:
        # board[3], board[4], board[5] = board[5], board[3], board[4]
    # elif rowNum == 6:


def moveCol(colNum):
    global board
    if colNum == 1:
        b0 = board[3][0]
        board[3][0] = board[4][0]
        board[4][0] = board[5][0]
        board[5][0] = board[8][3]
        board[8][3] = board[8][4]
        board[8][4] = board[8][5]
        board[8][5] = board[5][8]
        board[5][8] = board[4][8]
        board[4][8] = board[3][8]
        board[3][8] = board[0][5]
        board[0][5] = board[0][4]
        board[0][4] = board[0][3]
        board[0][3] = b0

    elif colNum == 2:
        b0 = board[3][1]
        board[3][1] = board[4][1]
        board[4][1] = board[5][1]
        board[5][1] = board[7][3]
        board[7][3] = board[7][4]
        board[7][4] = board[7][5]
        board[7][5] = board[5][7]
        board[5][7] = board[4][7]
        board[4][7] = board[3][7]
        board[3][7] = board[1][5]
        board[1][5] = board[1][4]
        board[1][4] = board[1][3]
        board[1][3] = b0

    elif colNum == 3:
        b0 = board[3][2]
        board[3][2] = board[4][2]
        board[4][2] = board[5][2]
        board[5][2] = board[6][3]
        board[6][3] = board[6][4]
        board[6][4] = board[6][5]
        board[6][5] = board[5][6]
        board[5][6] = board[4][6]
        board[4][6] = board[3][6]
        board[3][6] = board[2][5]
        board[2][5] = board[2][4]
        board[2][4] = board[2][3]
        board[2][3] = b0

    elif colNum == 4:
        b0 = board[0][3]
        for i in range(1, 9):
            board[i-1][3] = board[i][3]
        
        y0 = board[5][11]
        board[5][11] = board[4][11]
        board[4][11] = board[3][11]
        board[3][11] = b0
        board[8][3] = y0

    elif colNum == 5:
        b0 = board[0][4]
        for i in range(1, 9):
            board[i-1][4] = board[i][4]
        
        y0 = board[5][10]
        board[5][10] = board[4][10]
        board[4][10] = board[3][10]
        board[3][10] = b0
        board[8][4] = y0
        

    elif colNum == 6:
        b0 = board[0][5]
        for i in range(1, 9):
            board[i-1][5] = board[i][5]
        
        y0 = board[5][9]
        board[5][9] = board[4][9]
        board[4][9] = board[3][9]
        board[3][9] = b0
        board[8][5] = y0

    # elif colNum == 7:
    #     pass
    # elif colNum == 8:
    #     pass
    # elif colNum == 9:
    #     pass
    # elif colNum == 10:
    #     pass
    # elif colNum == 11:
    #     pass
    # elif colNum == 12:
    #     pass





def rotateCube(start, moves):
    moves = moves.split()

    for move in moves:
        position = getPosition(start)

        ticks = int(move[2])
        if move[1] == 'R':
            ticks = 12 - ticks 
        
        if move[0] == 'C': #Column
            colNum = position[1] + 1 # 1..12
            
            if colNum >= 7:
                colNum = colNum - 6
                ticks = 12 - ticks
            
            for i in range(ticks):
                moveCol(colNum)

        else: #Row
            rowNum = position[0] + 1 # 1..9
            if 1 <= rowNum and rowNum <= 3 or 7 <= rowNum and rowNum <= 9:
                colNum = 10 - rowNum
                
                if colNum >= 7:
                    colNum = colNum - 6
                    ticks = 12 - ticks

                for i in range(ticks):
                    moveCol(colNum)
            else:
                for i in range(ticks):
                    moveRow(rowNum)
    
    # for r in board:
    #     print(" ".join(r))

    position = getPosition(start)

    if position[0] < 3 and 2 < position[1] < 6:
        return "".join(board[0][3:6]) + "".join(board[1][3:6]) + "".join(board[2][3:6])
    elif 2 < position[0] < 6:
        if position[1] < 3:
            return "".join(board[3][0:3]) + "".join(board[4][0:3]) + "".join(board[5][0:3])
        elif position[1] < 6:
            return "".join(board[3][3:6]) + "".join(board[4][3:6]) + "".join(board[5][3:6])
        elif position[1] < 9:
            return "".join(board[3][6:9]) + "".join(board[4][6:9]) + "".join(board[5][6:9])
        else:
            return "".join(board[3][9:]) + "".join(board[4][9:]) + "".join(board[5][9:])
    else:
        return "".join(board[6][3:6]) + "".join(board[7][3:6]) + "".join(board[8][3:6])

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    start = input()

    moves = input()

    result = rotateCube(start, moves)

    fptr.write(result + '\n')

    fptr.close()
